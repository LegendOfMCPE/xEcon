<?php

/*
 *
 * xEcon
 *
 * Copyright (C) 2017 SOFe
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
*/

namespace xecon\player;

use xecon\modifier\AccountModifier;
use xecon\modifier\SprintfCurrencyUnit;

class PlayerAccountModifier extends AccountModifier{
	public static $modifierConfigs = [];

	private $config;

	public function getCurrencyUnit(){
		if(isset($this->getConfig()["unit"])){
			return new SprintfCurrencyUnit($this->getConfig()["unit"]);
		}
		return parent::getCurrencyUnit();
	}

	public function canSetBalance(float $newBalance) : bool{
		if(isset($this->getConfig()["min"])){
			if($this->getConfig()["min"] > $newBalance){
				return false;
			}
		}
		if(isset($this->getConfig()["max"])){
			if($this->getConfig()["max"] < $newBalance){
				return false;
			}
		}
		return parent::canSetBalance($newBalance); // TODO: Change the autogenerated stub
	}

	public function onLoad(){
		if(isset($this->getConfig()["interest"])){
			$now = time();
			$last = $this->getAccount()->getLastFinalize();
			$balance = $this->getAccount()->getBalance();

			do{
				$again = $this->compoundInterest($balance, $last, $now);
				if(isset($this->getConfig()["min"]) && $balance < $this->getConfig()["min"]){
					// TODO bankrupcy
					break;
				}
			}while($again);

			if($balance != $this->getAccount()->getBalance()){
				$this->getPlugin()->getLogger()->debug("Balance of {$this->getAccount()->getAbsoluteName()}, gained interest through {$this->getName()}, increased from {$this->getAccount()->getBalance()} to $balance");
				$this->getAccount()->setBalance($balance);
			}
		}
	}

	public function onFinalize(){
		if(isset($this->getConfig()["interest"])){
			$now = time();
			$last = $this->getAccount()->getLoadTime();
			$balance = $this->getAccount()->getBalance();

			do{
				$again = $this->compoundInterest($balance, $last, $now);
				if(isset($this->getConfig()["min"]) && $balance < $this->getConfig()["min"]){
					// TODO bankrupcy
					break;
				}
			}while($again);

			if($balance != $this->getAccount()->getBalance()){
				$this->getPlugin()->getLogger()->debug("Balance of {$this->getAccount()->getAbsoluteName()}, gained interest through {$this->getName()}, increased from {$this->getAccount()->getBalance()} to $balance");
				$this->getAccount()->setBalance($balance);
			}
		}
	}

	private function compoundInterest(float &$balance, int &$last, int $now) : bool{
		if($last > $now){
			throw new \InvalidArgumentException();
		}
		if($balance === 0){
			return false;
		}
		$margins = $this->getConfig()["margins"];

		$interestRules = $this->getConfig()["interest"];

		for($i = 1; $i < count($margins); $i++){
			$leftMargin = $margins[$i - 1];
			$rightMargin = $margins[$i];
			if($leftMargin <= $balance && $balance <= $rightMargin){
				$ok = true;
				break;
			}
		}
		assert(isset($ok, $leftMargin, $rightMargin), "\$margins should contain -INF and INF and should not be empty");
		unset($ok);

		foreach($interestRules as $rule){
			$if = $rule["if"];
			if($if($balance)){
				$interest = $rule;
				break;
			}
		}
		if(!isset($interest)){
			return false; // no interest
		}

		$r = $interest["compound"];
		$freq = $interest["every"];
		$n = ((int) ($now / $freq)) - ((int) ($last / $freq));
		$after = $balance * $r ** $n;

		if($leftMargin <= $after && $after <= $rightMargin){
			// still in this range after compounding, so no need to loop
			$balance = $after;
			return false;
		}else{
			$towardsMargin = ($r > 1) === ($balance > 0) ? $rightMargin : $leftMargin;
			$elapsedRounds = (int) ceil(log($towardsMargin / $balance, $r));
			assert($n >= $elapsedRounds); // i.e. $now - $last >= $every * $elapsedRounds
			$balance *= $r ** $elapsedRounds;
			$last += $freq * $elapsedRounds;
			// Now at $last, evaluate more interest till $now
			return true;
		}
	}

	private function getConfig(){
		return $this->config ?? ($this->config = self::$modifierConfigs[$this->getName()]);
	}
}
