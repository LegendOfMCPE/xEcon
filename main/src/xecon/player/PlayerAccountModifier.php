<?php

/*
 *
 * xEcon
 *
 * Copyright (C) 2017 SOFe
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
*/

namespace xecon\player;

use xecon\modifier\AccountModifier;
use xecon\modifier\SprintfCurrencyUnit;

class PlayerAccountModifier extends AccountModifier{
	public static $modifierConfigs = [];

	private $config;

	public function getCurrencyUnit(){
		if(isset($this->getConfig()["unit"])){
			return new SprintfCurrencyUnit($this->getConfig()["unit"]);
		}
		return parent::getCurrencyUnit();
	}

	public function canSetBalance(float $newBalance) : bool{
		if(isset($this->getConfig()["min"])){
			if($this->getConfig()["min"] > $newBalance){
				return false;
			}
		}
		if(isset($this->getConfig()["max"])){
			if($this->getConfig()["max"] < $newBalance){
				return false;
			}
		}
		return parent::canSetBalance($newBalance); // TODO: Change the autogenerated stub
	}

	public function onLoad(){
		$now = time();
		$last = $this->getAccount()->getLastFinalize();
		$margins = $this->getConfig()["margins"];

		$balance = $this->getAccount()->getBalance();

		$interestRules = $this->getConfig()["interest"];

		// margin_loop
		for($i = 0; $i <= count($margins); $i++){
			assert($last <= $now);
			$leftMargin = $i === 0 ? -INF : $margins[$i - 1];
			$rightMargin = $i === count($margins) ? INF : $margins[$i];

			if($leftMargin <= $balance and $balance <= $rightMargin){
				$bestRule = null;
				foreach($interestRules as $rule){
					$if = $rule["if"];
					if($if($balance)){
						if($bestRule === null){
							$bestRule = $rule;
						}elseif($bestRule["priority"] < $rule){
							$bestRule = $rule;
						}
					}
				}
				if($bestRule === null){
					break; // margin_loop
				}

				$r = $bestRule["compound"];
				$n = ((int) ($now / $bestRule["every"])) - ((int) ($last / $bestRule["every"]));
				$after = $balance * $r ** $n;

				if($leftMargin <= $after && $after <= $rightMargin){
					// still in this range
					$balance = $after;
					break; // margin_loop
				}else{
					//             | r > 1 | r < 1
					// balance > 0 | right | left
					// balance < 0 | left  | right
					$tendsTowards = ($r > 1) === ($balance > 0) ? $rightMargin : $leftMargin;
					$elapsedRounds = (int) ceil(log($tendsTowards / $balance, $r));
					$balance *= $r ** $elapsedRounds;
					$last += $bestRule["every"] * $elapsedRounds;

					if($balance < ($this->getConfig()["min"] ?? -INF)){
						// TODO bankrupcy
					}

					// in another margin range now, search from the beginning again
					$i = -1;
					continue; // margin_loop
				}
			}else{
				// not in this margin range, search in the next range
				continue; // margin_loop
			}
		}

		if($balance != $this->getAccount()->getBalance()){
			$this->getPlugin()->getLogger()->debug("Balance of {$this->getAccount()->getAbsoluteName()}, gained interest through {$this->getName()}, increased from {$this->getAccount()->getBalance()} to $balance");
			$this->getAccount()->setBalance($balance);
		}
	}

	private function getConfig(){
		return $this->config ?? ($this->config = self::$modifierConfigs[$this->getName()]);
	}
}
